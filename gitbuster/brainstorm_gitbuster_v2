IMPORTANT:
##########
    On parle de l'historique en partant du premier commit du dépôt.
    Si je commite a, puis b, puis c: a est le premier commit.
    Le commit avant b est a, le commit après b est c.
    => rien après HEAD, rien avant le premier commit


TODOLIST:
#########

* Catcher le drop autour de la flêche: jouer avec le roundingRect pour élargir.
* Utiliser une QAnimation pendant le hovering over an arrow.


DISCUSSIONS FERMÉES:
####################

# Si * graphics views:
#  CommitItem n'a pas besoin de stocker la dernière position de chaque branche
#  Plus facile pour rajouter ou enlever des branches
#  Plus facile pour scroller
# ADOPTÉ

# Déplacer les QGraphicsItem plutôt que les peindre un peu plus loin.
# ADOPTÉ

# On ne doit pas avoir d'opérations de filter et de rebase en même temps
# Raisonnement par l'absurde:
#   - si on a des modifications filter et rebase en même temps, si on applique filter
#   - les commits sont réecrits
#   - comment peut-on faire le lien entre les modifications de rebase et les nouveaux
#   commits ?
#   - soit on fait confiance à l'auteur, date, message de commit MAIS ça peut avoir
#   été changé
#   - soit on fait confiance à d'autres éléments, comme le tree hash, MAIS le tree hash
#   n'est pas un identifiant unique
#
# En vérité, il est possible de faire à la fois du cherry-picking en mode rebase et de
# modifier les champs (en commitant et en exportant les bonnes variables d'env)
#
# On doit pouvoir se passer de git filter-rebase, en passant par un git cherry-pick -n
# puis un git commit avec export GIT_COMMITTER_NAME, GIT_AUTHOR_NAME, etc.
#
# $ git checkout <oldest_modified_commit_parent> -b tmp_rebase
# $ git cherry-pick -n <commit_to_change>
# $ GIT_AUTHOR_NAME="Julien Miotte"; GIT_COMMITTER_NAME="Julien Miotte"; git commit
# or
# $ git commit -C <commit_to_insert>
# (also, see .git/MERGE_MSG at this point)
#

DISCUSSIONS EN COURS:
#####################

Déplacement des BranchViews :
#  Une zone centrale avec des BranchViewWidget draggables pour réorganiser

Zone de hint, conseils, aide qui change selon les actions de l'utilisateur
#  Recevoir de l'aide adaptée à chaque commande
#  Peut être un label plutôt qu'une zone de texte dans la graphicsView

[Drag & Drop]
How to deal with inserting commits after HEAD or before the first commit ?
#     * before the first commit:
#         J'ai l'impression qu'on ne peut pas avec git rebase changer le premier
#         commit
#         => il faut que le dernier commit n'ai pas de flêche vers le bas.
#         => il faut pouvoir spécifier que le commitItem est le dernier
#     * after HEAD:
#         un commitItem pourrait être utilisé pour représenter HEAD
#         => pas de problème pour catcher le drop
#         => la flêche doit être inversée.

[Model/View]
Faut il reimplémenter le MVD pour graphicsView ou utiliser GitPython directement ?
# Utiliser QGraphicsScene(QAbstractItemModel):
#  + on réutilise tout le formatage des dates, auteurs, messages de commit
#  + on a un design pattern pour insérer des données
#  - il faut modifier q_git_model pour pouvoir insérer des nouveaux commits, pour
#    pouvoir récupérer les blobs
#  - il faut gérer le process de filter et le process de rebase dans git_model
#  - du boulot pour faire hériter une scène de QAbstractItemModel
#
# Utiliser directement GitPython
#  + c'est simple
#  - pas mal de boulot à refaire sur l'affichage des données
#
# Si on peut faire des date edits en même temps que du rebasing, il devient intéressant
# de garder le même modèle pour les deux onglets.

[filter/rebase]
# Que se passe-t-il quand on a des modifications dans les deux onglets ?
# Que se passe-t-il quand on a des modifications sur deux branches ?

[diffs&sanity]
# 1ere solution : appliquer sur une branche temporaire mais ne pas la déplacer sur la
# branche originale. Retourner le commit sur lequel le merge a échoué.
# Proposer de corriger les fichiers avec des problèmes de merge.
# Stocker le diff dans un fichier (diff à appliquer par dessus le diff).
# Marquer le commit comme résolu, relancer le check.

[gitModel]
# Nous avons besoin de pouvoir recharger la population du modèle (pour les filtres
# principalement). Or pour le moment, en faisant cela, on efface self._commits. On
# est donc pas en mesure de stocker des commits insérés dans self._commits.
# On peut :
# * rajouter une liste self._enlarged contenant les commits originaux + insérés
# * tout mettre dans self._commits mais ne pas l'écraser (problème pour afficher le
# modèle sans les modifications)
# Pour toutes les fonctions, si les modifications sont activées, c'est self._enlarged
# + self._modifications qui devra être affiché, sinon self._commits.
# (self._modified devient self._modifications)

[commitsSquash]
# Les commits squashés seront des objets spéciaux, ayant une liste de commits. C'est à
# l'interface de déterminer si les commits dans la liste sont bien successifs dans le
# modèle.
# L'interface permettra d'éditer le nouveau message de commit à partir des messages dec
# commit des commit squashés.
